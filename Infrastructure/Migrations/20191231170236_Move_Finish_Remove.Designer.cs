// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ProductionDbContext))]
    [Migration("20191231170236_Move_Finish_Remove")]
    partial class Move_Finish_Remove
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.ActionLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<int>("NewStateID")
                        .HasColumnType("int");

                    b.Property<int?>("OldStateID")
                        .HasColumnType("int");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("EventID");

                    b.HasIndex("NewStateID");

                    b.HasIndex("OldStateID");

                    b.ToTable("CheckCenterActionLogs");

                    b.HasData(
                        new
                        {
                            ID = 6,
                            Created = new DateTime(2019, 12, 31, 18, 2, 35, 541, DateTimeKind.Local).AddTicks(7233),
                            EventID = 5,
                            NewStateID = 2,
                            UserEmail = "tvw203@gmail.com"
                        },
                        new
                        {
                            ID = 7,
                            Created = new DateTime(2019, 12, 31, 18, 2, 35, 541, DateTimeKind.Local).AddTicks(9049),
                            EventID = 5,
                            NewStateID = 3,
                            OldStateID = 2,
                            UserEmail = "tvw203@gmail.com"
                        });
                });

            modelBuilder.Entity("Domain.AdditionalInfo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("EventID");

                    b.ToTable("CheckCenterAdditionalInfo");

                    b.HasData(
                        new
                        {
                            ID = 12,
                            EventID = 5,
                            Key = "Amount of tickets",
                            Value = "0"
                        },
                        new
                        {
                            ID = 13,
                            EventID = 5,
                            Key = "Location",
                            Value = "Amsterdam"
                        });
                });

            modelBuilder.Entity("Domain.CheckType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("CheckCenterCheckTypes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "An AX instance type",
                            Title = "AXInstance"
                        });
                });

            modelBuilder.Entity("Domain.Comment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("ID");

                    b.HasIndex("EventID");

                    b.ToTable("CheckCenterComments");

                    b.HasData(
                        new
                        {
                            ID = 10,
                            Content = "Recurring issue, cause known but no fix available yet",
                            Created = new DateTime(2019, 12, 31, 18, 2, 35, 542, DateTimeKind.Local).AddTicks(1519),
                            EventID = 5,
                            UserEmail = "tvw203@gmail.com"
                        },
                        new
                        {
                            ID = 11,
                            Content = "Snoozed issue for 36 hours",
                            Created = new DateTime(2019, 12, 31, 18, 2, 35, 542, DateTimeKind.Local).AddTicks(1529),
                            EventID = 5,
                            UserEmail = "tvw203@gmail.com"
                        });
                });

            modelBuilder.Entity("Domain.Event", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Added")
                        .HasColumnType("datetime2");

                    b.Property<int>("CheckTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("EventSeverity")
                        .HasColumnType("int");

                    b.Property<string>("Shorthand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SourceID")
                        .HasColumnType("int");

                    b.Property<int>("StateID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CheckTypeID");

                    b.HasIndex("SourceID");

                    b.HasIndex("StateID");

                    b.ToTable("CheckCenterEvents");

                    b.HasData(
                        new
                        {
                            ID = 5,
                            Added = new DateTime(2019, 12, 31, 18, 2, 35, 537, DateTimeKind.Local).AddTicks(1945),
                            CheckTypeID = 1,
                            Description = "Ods - Breda/Warn: 1 MTs missing from Oltp",
                            EventSeverity = 300,
                            Shorthand = "s0sd009ds",
                            SourceID = 4,
                            StateID = 2,
                            Title = "Ods -1MTs from Oltp",
                            Updated = new DateTime(2019, 12, 31, 18, 2, 35, 541, DateTimeKind.Local).AddTicks(3843)
                        });
                });

            modelBuilder.Entity("Domain.Feedback", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("EventID");

                    b.ToTable("CheckCenterFeedback");

                    b.HasData(
                        new
                        {
                            ID = 8,
                            Content = "@gli23 you didn't mark the issue as recurring",
                            Created = new DateTime(2019, 12, 31, 18, 2, 35, 542, DateTimeKind.Local).AddTicks(406),
                            EventID = 5,
                            UserEmail = "tvw203@gmail.com"
                        },
                        new
                        {
                            ID = 9,
                            Content = "@gli23 you didn't update the state to UI",
                            Created = new DateTime(2019, 12, 31, 18, 2, 35, 542, DateTimeKind.Local).AddTicks(1486),
                            EventID = 5,
                            UserEmail = "iemand@gmail.com"
                        });
                });

            modelBuilder.Entity("Domain.Source", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CheckCenterServiceId")
                        .HasColumnType("int");

                    b.Property<int>("CheckTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ComebackDelay")
                        .HasColumnType("int");

                    b.Property<string>("ConnectionString")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsCustomerSource")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStacked")
                        .HasColumnType("bit");

                    b.Property<bool>("LogActionMandatory")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("SourceSeverity")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CheckTypeID");

                    b.ToTable("CheckCenterSources");

                    b.HasData(
                        new
                        {
                            ID = 4,
                            Active = true,
                            CheckCenterServiceId = 110,
                            CheckTypeID = 1,
                            Color = "Yellow",
                            ComebackDelay = 5000,
                            ConnectionString = "msssql://sample",
                            DisplayName = "AX Amsterdam",
                            IsCustomerSource = true,
                            IsStacked = true,
                            LogActionMandatory = false,
                            Order = 550,
                            SourceSeverity = 500
                        });
                });

            modelBuilder.Entity("Domain.State", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SourceID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("SourceID");

                    b.ToTable("CheckCenterStates");

                    b.HasData(
                        new
                        {
                            ID = 2,
                            Description = "Issue is under investigation",
                            SourceID = 4,
                            Title = "Under investigation"
                        },
                        new
                        {
                            ID = 3,
                            Description = "Issue has been resolved",
                            SourceID = 4,
                            Title = "Resolved"
                        });
                });

            modelBuilder.Entity("Domain.ActionLog", b =>
                {
                    b.HasOne("Domain.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.State", "NewState")
                        .WithMany()
                        .HasForeignKey("NewStateID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.State", "OldState")
                        .WithMany()
                        .HasForeignKey("OldStateID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Domain.AdditionalInfo", b =>
                {
                    b.HasOne("Domain.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Comment", b =>
                {
                    b.HasOne("Domain.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Event", b =>
                {
                    b.HasOne("Domain.CheckType", "CheckType")
                        .WithMany()
                        .HasForeignKey("CheckTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.State", "State")
                        .WithMany()
                        .HasForeignKey("StateID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Feedback", b =>
                {
                    b.HasOne("Domain.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Source", b =>
                {
                    b.HasOne("Domain.CheckType", "CheckType")
                        .WithMany()
                        .HasForeignKey("CheckTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.State", b =>
                {
                    b.HasOne("Domain.Source", null)
                        .WithMany("States")
                        .HasForeignKey("SourceID")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
